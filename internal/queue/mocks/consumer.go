// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rabbitmq "github.com/wagslane/go-rabbitmq"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// StartConsuming mocks base method.
func (m *MockConsumer) StartConsuming(handler rabbitmq.Handler, queue string, routingKeys []string, optionFuncs ...func(*rabbitmq.ConsumeOptions)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{handler, queue, routingKeys}
	for _, a := range optionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartConsuming", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsuming indicates an expected call of StartConsuming.
func (mr *MockConsumerMockRecorder) StartConsuming(handler, queue, routingKeys interface{}, optionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{handler, queue, routingKeys}, optionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsuming", reflect.TypeOf((*MockConsumer)(nil).StartConsuming), varargs...)
}
