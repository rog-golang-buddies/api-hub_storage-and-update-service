// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package process is a generated GoMock package.
package process

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apispecdoc "github.com/rog-golang-buddies/api_hub_common/apispecdoc"
)

// MockUrlProcessor is a mock of UrlProcessor interface.
type MockUrlProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockUrlProcessorMockRecorder
}

// MockUrlProcessorMockRecorder is the mock recorder for MockUrlProcessor.
type MockUrlProcessorMockRecorder struct {
	mock *MockUrlProcessor
}

// NewMockUrlProcessor creates a new mock instance.
func NewMockUrlProcessor(ctrl *gomock.Controller) *MockUrlProcessor {
	mock := &MockUrlProcessor{ctrl: ctrl}
	mock.recorder = &MockUrlProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlProcessor) EXPECT() *MockUrlProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockUrlProcessor) Process(ctx context.Context, url string) (*apispecdoc.ApiSpecDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, url)
	ret0, _ := ret[0].(*apispecdoc.ApiSpecDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockUrlProcessorMockRecorder) Process(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockUrlProcessor)(nil).Process), ctx, url)
}
