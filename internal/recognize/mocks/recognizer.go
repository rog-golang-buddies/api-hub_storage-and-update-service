// Code generated by MockGen. DO NOT EDIT.
// Source: recognizer.go

// Package recognize is a generated GoMock package.
package recognize

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fileresource "github.com/rog-golang-buddies/api-hub_data-scraping-service/internal/dto/fileresource"
)

// MockRecognizer is a mock of Recognizer interface.
type MockRecognizer struct {
	ctrl     *gomock.Controller
	recorder *MockRecognizerMockRecorder
}

// MockRecognizerMockRecorder is the mock recorder for MockRecognizer.
type MockRecognizerMockRecorder struct {
	mock *MockRecognizer
}

// NewMockRecognizer creates a new mock instance.
func NewMockRecognizer(ctrl *gomock.Controller) *MockRecognizer {
	mock := &MockRecognizer{ctrl: ctrl}
	mock.recorder = &MockRecognizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecognizer) EXPECT() *MockRecognizerMockRecorder {
	return m.recorder
}

// RecognizeFileType mocks base method.
func (m *MockRecognizer) RecognizeFileType(resource *fileresource.FileResource) (fileresource.AsdFileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecognizeFileType", resource)
	ret0, _ := ret[0].(fileresource.AsdFileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecognizeFileType indicates an expected call of RecognizeFileType.
func (mr *MockRecognizerMockRecorder) RecognizeFileType(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecognizeFileType", reflect.TypeOf((*MockRecognizer)(nil).RecognizeFileType), resource)
}
