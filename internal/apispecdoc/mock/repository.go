// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package apispecdoc is a generated GoMock package.
package apispecdoc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apispecdoc "github.com/rog-golang-buddies/api-hub_storage-and-update-service/internal/apispecdoc"
	dto "github.com/rog-golang-buddies/api-hub_storage-and-update-service/internal/dto"
)

// MockAsdRepository is a mock of AsdRepository interface.
type MockAsdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAsdRepositoryMockRecorder
}

// MockAsdRepositoryMockRecorder is the mock recorder for MockAsdRepository.
type MockAsdRepositoryMockRecorder struct {
	mock *MockAsdRepository
}

// NewMockAsdRepository creates a new mock instance.
func NewMockAsdRepository(ctrl *gomock.Controller) *MockAsdRepository {
	mock := &MockAsdRepository{ctrl: ctrl}
	mock.recorder = &MockAsdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsdRepository) EXPECT() *MockAsdRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAsdRepository) Delete(ctx context.Context, asd *apispecdoc.ApiSpecDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, asd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAsdRepositoryMockRecorder) Delete(ctx, asd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAsdRepository)(nil).Delete), ctx, asd)
}

// FindByHash mocks base method.
func (m *MockAsdRepository) FindByHash(ctx context.Context, hash string) (*apispecdoc.ApiSpecDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", ctx, hash)
	ret0, _ := ret[0].(*apispecdoc.ApiSpecDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockAsdRepositoryMockRecorder) FindByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*MockAsdRepository)(nil).FindByHash), ctx, hash)
}

// FindById mocks base method.
func (m *MockAsdRepository) FindById(ctx context.Context, id uint) (*apispecdoc.ApiSpecDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*apispecdoc.ApiSpecDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockAsdRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAsdRepository)(nil).FindById), ctx, id)
}

// FindByUrl mocks base method.
func (m *MockAsdRepository) FindByUrl(ctx context.Context, url string) (*apispecdoc.ApiSpecDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUrl", ctx, url)
	ret0, _ := ret[0].(*apispecdoc.ApiSpecDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUrl indicates an expected call of FindByUrl.
func (mr *MockAsdRepositoryMockRecorder) FindByUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUrl", reflect.TypeOf((*MockAsdRepository)(nil).FindByUrl), ctx, url)
}

// Save mocks base method.
func (m *MockAsdRepository) Save(ctx context.Context, asd *apispecdoc.ApiSpecDoc) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, asd)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAsdRepositoryMockRecorder) Save(ctx, asd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAsdRepository)(nil).Save), ctx, asd)
}

// SearchShort mocks base method.
func (m *MockAsdRepository) SearchShort(ctx context.Context, search string, page dto.PageRequest) (apispecdoc.AsdPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchShort", ctx, search, page)
	ret0, _ := ret[0].(apispecdoc.AsdPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchShort indicates an expected call of SearchShort.
func (mr *MockAsdRepositoryMockRecorder) SearchShort(ctx, search, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchShort", reflect.TypeOf((*MockAsdRepository)(nil).SearchShort), ctx, search, page)
}

// Update mocks base method.
func (m *MockAsdRepository) Update(ctx context.Context, asd *apispecdoc.ApiSpecDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, asd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAsdRepositoryMockRecorder) Update(ctx, asd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAsdRepository)(nil).Update), ctx, asd)
}
